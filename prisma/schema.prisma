// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  Admin
  Editor
  Moderator
  User
}

model Category {
  id            String        @id @default(cuid())
  name          String
  bannerUrl     String
  visibility    Boolean       @default(true)
  subcategories SubCategory[]
  products      Product[]
}

model SubCategory {
  id         String    @id @default(cuid())
  name       String
  visibility Boolean   @default(true)
  parent     Category  @relation(fields: [parentId], references: [id])
  parentId   String
  products   Product[]
}

model Product {
  id            String        @id @default(cuid())
  name          String
  description   String?
  price         Decimal?
  visibility    Boolean       @default(false)
  hiddenPrice   Boolean       @default(true)
  available     Boolean       @default(false)
  photos        Photo[]
  category      Category?     @relation(fields: [categoryId], references: [id])
  categoryId    String?
  subcategories SubCategory[]
}

model Photo {
  id        String   @id @default(cuid())
  url       String
  product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(User)
  active        Boolean   @default(true)
  deletedAt     DateTime?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
